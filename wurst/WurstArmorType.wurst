/**
	This package is for evaluating the armor type (light, medium, heavy) of a
	unit.  It is a thin wrapper around
	`BlzGetUnitIntegerField(u, UNIT_IF_DEFENSE_TYPE)`.  The API is exposed as an
	enum, and the enum values can be printed with the .display() method.
*/
package WurstArmorType

/**
	A type-safe wrapper for unit armor type.  Typically this should be obtained
	by evaluating a unit's `getArmorType()` extension-function.
*/
public enum ArmorType
	UNKNOWN
	LIGHT
	MEDIUM
	LARGE
	FORT
	NORMAL
	HERO
	DIVINE
	NONE

/**
	Cast an armor type variant to string, using the default game-friendly names,
	i.e. "None" becomes "Unarmored", "Large" becomes "Heavy", etc.
*/
public function ArmorType.display() returns string
	switch this
		case UNKNOWN
			return "Unknown"
		case LIGHT
			return "Light"
		case MEDIUM
			return "Medium"
		case LARGE
			return "Heavy"
		case FORT
			return "Fortified"
		case NORMAL
			return "Normal"
		case HERO
			return "Hero"
		case DIVINE
			return "Divine"
		case NONE
			return "Unarmored"

/**
	Get the armor type from a given unit.  Uses 1.31 natives for the unit's
	object field, via UNIT_IF_DEFENSE_TYPE.
*/
public function unit.getArmorType() returns ArmorType
	let dt = ConvertDefenseType(
		BlzGetUnitIntegerField(this, UNIT_IF_DEFENSE_TYPE)
	)

	if dt == DEFENSE_TYPE_LIGHT
		return ArmorType.LIGHT
	else if dt == DEFENSE_TYPE_MEDIUM
		return ArmorType.MEDIUM
	else if dt == DEFENSE_TYPE_LARGE
		return ArmorType.LARGE
	else if dt == DEFENSE_TYPE_FORT
		return ArmorType.FORT
	else if dt == DEFENSE_TYPE_NORMAL
		return ArmorType.NORMAL
	else if dt == DEFENSE_TYPE_HERO
		return ArmorType.HERO
	else if dt == DEFENSE_TYPE_DIVINE
		return ArmorType.DIVINE
	else if dt == DEFENSE_TYPE_NONE
		return ArmorType.NONE
	return ArmorType.UNKNOWN

/*
	This can be uncommented for testing purposes.
*/
// init
// 	CreateTrigger()
// 		..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELECTED)
// 		..addAction() ->
// 			print(GetTriggerUnit().getArmorType().display())
